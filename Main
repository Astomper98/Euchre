import Euchre_game
import RandomPlayer

suits = ['S', 'C', 'H', 'D']
suits_from_letters = {'S': 'Spades', 'C': 'Clubs', 'D': 'Diamonds', 'H': 'Hearts'}


# Asks whether you want to play or have it be only computers. It then uses all the other functions to play the game
# until someone gets 10 points when game_score becomes false and the code exits
def play_game():
    choice_bool = True
    while choice_bool:
        choice = input('Would you like to have a real player in the game? (yes/no)')
        choice = choice[0].lower()
        if choice == 'n':
            game_score = [0, 0]
            dealer = Euchre_game.decide_first_dealer()
            while game_score:
                game_score = update_game_score(game_score, play_hand(dealer))
                dealer = (dealer + 1) % 5
                if dealer == 0:
                    dealer = 1
            choice_bool = False
        elif choice == 'y':
            game_score = [0, 0]
            dealer = Euchre_game.decide_first_dealer()
            while game_score:
                game_score = update_game_score(game_score, play_hand(dealer, True))
                dealer = (dealer + 1) % 5
                if dealer == 0:
                    dealer = 1
                input('Press enter to continue')
            choice_bool = False
        else:
            print('Invalid choice. Try again.')


# Used to play each individual hand
def play_hand(dealer, real_player=False):
    # If there is no real player each player will be set to random player and randomly play
    if not real_player:
        trick_score = [0, 0]
        team_1 = [1, 3]
        print('player{} is the dealer'.format(dealer))
        hands = Euchre_game.deal_cards()
        player1 = RandomPlayer.RandomPlayer(hands[0], hands[4])
        player2 = RandomPlayer.RandomPlayer(hands[1], hands[4])
        player3 = RandomPlayer.RandomPlayer(hands[2], hands[4])
        player4 = RandomPlayer.RandomPlayer(hands[3], hands[4])

        trump, caller = determine_trump(dealer, player1, player2, player3, player4, hands[4])
        leader = dealer + 1
        if leader == 5:
            leader = 1
        print('player{} leads'.format(leader))
        winner = play_trick(leader, trump, player1, player2, player3, player4)
        trick_score = new_trick_score(winner, trick_score)

        for i in range(4):
            winner = play_trick(winner, trump, player1, player2, player3, player4)
            trick_score = new_trick_score(winner, trick_score)

    # If there is a real player player 1 is set as a real player. There are breaks in the code where you must press
    # enter to continue to make it easier to read and follow
    else:
        trick_score = [0, 0]
        team_1 = [1, 3]
        print('player{} is the dealer'.format(dealer))
        hands = Euchre_game.deal_cards()
        player1 = RandomPlayer.RealPlayer(hands[0], hands[4])
        player2 = RandomPlayer.RandomPlayer(hands[1], hands[4])
        player3 = RandomPlayer.RandomPlayer(hands[2], hands[4])
        player4 = RandomPlayer.RandomPlayer(hands[3], hands[4])

        trump, caller = determine_trump(dealer, player1, player2, player3, player4, hands[4])
        input('Press enter to continue')
        leader = dealer + 1
        if leader == 5:
            leader = 1
        print('player{} leads'.format(leader))
        winner = play_trick(leader, trump, player1, player2, player3, player4)
        trick_score = new_trick_score(winner, trick_score)
        input('Press enter to continue')
        for i in range(4):
            winner = play_trick(winner, trump, player1, player2, player3, player4)
            trick_score = new_trick_score(winner, trick_score)
            input('Press enter to continue')
    return hand_score(caller, trick_score, team_1)


# Used to determine the trump using pick_or_pass and call_or_pass. If no one calls the dealer must call a suit
def determine_trump(dealer, player1, player2, player3, player4, up_card):
    player_dictionary = {1: player1, 2: player2, 3: player3, 4: player4}
    print('{} is up'.format(up_card))
    count = 0
    called = False
    dealer1 = dealer
    trump = ''
    while not called and count < 4:
        print('player{}:'.format((dealer1 % 4) + 1))
        called = player_dictionary[(dealer1 % 4) + 1].pick_or_pass(up_card, dealer)
        dealer1 += 1
        count += 1
    if called:
        trump = up_card[1]
        caller = ((dealer1 - 1) % 4) + 1
        player_dictionary[dealer].pick_and_replace()
        print('''{} is trump
        '''.format(suits_from_letters[trump]))
        return [trump, caller]
    while not called and count < 7:
        print('player{}:'.format((dealer1 % 4) + 1))
        called = player_dictionary[(dealer1 % 4) + 1].call_or_pass()
        dealer1 += 1
        count += 1
    if called:
        trump = called
        caller = ((dealer1 - 1) % 4) + 1
        print('''{} is trump
        '''.format(suits_from_letters[trump]))
        return [trump, caller]
    else:
        print('player{}:'.format(dealer))
        trump = player_dictionary[dealer].call_or_pass(True)
        caller = dealer
        print('''{} is trump
        '''.format(suits_from_letters[trump]))
        return [trump, caller]


# PLays the trick
def play_trick(leader, trump, player1, player2, player3, player4):
    player_dictionary = {0: player1, 1: player2, 2: player3, 3: player4}
    player = leader - 1
    trick = ['', '', '', '']
    # If the leader is player 1 (the user if there is one) it plays a little differently to account for the real player
    if leader == 1:
        trick[player] = player_dictionary[player].lead_trick()
        led = trick[player][1]
        for i in range(1, 4):
            trick[(player + i) % 4] = player_dictionary[(player + i) % 4].follow_trick(led, trump)
        # After the trick it will print this to show the user what was played and then determine_trick_winner
        # Will print who won
        print('''
                    Player3
                      {}
          Player2 {}      {} Player4          
                      {} 
                    Player1
                    '''.format(trick[2], trick[1], trick[3], trick[0]))
        winner = Euchre_game.determine_trick_winner(trick, trump, led)
    # If the leader is not player1 (the user if there is one) it will now play up until the user print out the
    # screen so that the user can see what is played then after the user plays it will print the results and winner
    else:
        trick[player] = player_dictionary[player].lead_trick()
        led = trick[player][1]
        player += 1
        if player == 4:
            player = 0
        while not player == 0:
            trick[player] = player_dictionary[player].follow_trick(led, trump)
            player += 1
            if player == 4:
                player = 0
        print('''
                            Player3
                              {}
                  Player2 {}      {} Player4          
                              {} 
                            Player1
                            '''.format(trick[2], trick[1], trick[3], trick[0]))
        trick[player] = player_dictionary[player].follow_trick(led, trump)
        player += 1
        while not player == leader - 1:
            trick[player] = player_dictionary[player].follow_trick(led, trump)
            player += 1
        print('''
                            Player3
                              {}
                  Player2 {}      {} Player4          
                              {} 
                            Player1
                            '''.format(trick[2], trick[1], trick[3], trick[0]))
        winner = Euchre_game.determine_trick_winner(trick, trump, led)
    return winner


# Updates the score of the hand
def new_trick_score(winner, score):
    n_score = score
    if winner == 1 or winner == 3:
        n_score[0] += 1
    else:
        n_score[1] += 1
    print('The trick score is now Team 1/3: {} Team 2/4: {}'.format(n_score[0], n_score[1]))
    return n_score


# Decides based on who called and the hand score how many points each team wins
def hand_score(caller, trick_score, team_1):
    if caller in team_1 and trick_score[0] == 5:
        print('Team 1/3 wins 2 points')
        return [2, 0]
    elif caller in team_1 and trick_score[0] >= 3:
        print('Team 1/3 wins 1 point')
        return [1, 0]
    elif caller in team_1 or trick_score[0] == 0:
        print('Team 2/4 wins 2 points')
        return [0, 2]
    elif trick_score[0] >= 3:
        print('Team 1/3 wins 2 points')
        return [2, 0]
    else:
        print('Team 2/4 wins 1 point')
        return [0, 1]


# Updates the score of the whole game and prints it. If one reaches 10 points it will return false and
# the while look in play_game will break
def update_game_score(game_score, trick_score):
    game_score[0] += trick_score[0]
    game_score[1] += trick_score[1]
    if game_score[0] >= 10:
        print('Team 1/3 wins {} to {}'.format(game_score[0], game_score[1]))
        return False
    elif game_score[1] >= 10:
        print('Team 2/4 wins {} to {}'.format(game_score[1], game_score[0]))
        return False
    else:
        print('The game score is now Team 1/3: {} Team 2/4: {}'.format(game_score[0], game_score[1]))
    return game_score


play_game()

