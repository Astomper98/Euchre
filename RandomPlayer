import Euchre_game
import random

suits = ['S', 'C', 'H', 'D']
suits_from_letters = {'S': 'Spades', 'C': 'Clubs', 'D': 'Diamonds', 'H': 'Hearts'}


# Player that randomly calls based on a probability and plays randomly without renegging
class RandomPlayer:
    suits = ['S', 'C', 'H', 'D']

    # Initializes the players hand and the card facing up
    def __init__(self, hand, up_card):
        self.hand = hand
        self.up_card = up_card

    # Randomly leads a card with equal probability and returns the card played
    def lead_trick(self):
        length = len(self.hand)
        card_played = self.hand[random.randint(0, length - 1)]
        self.hand.remove(card_played)
        return card_played

    # Establishes which cards within the hand can be played and randomly selects one and returns that card
    def follow_trick(self, led, trump):
        playable_cards = Euchre_game.can_play(self.hand, led, trump)
        length = len(playable_cards)
        card_played = playable_cards[random.randint(0, length - 1)]
        self.hand.remove(card_played)
        return card_played

    # Decides with 25% probability whether to tell the dealer to pick it up returns
    # True/False to determine whether to keep going
    def pick_or_pass(self, up_card, dealer):
        rand = random.randint(1, 4)
        if rand == 1:
            print('Pick it up')
            return True
        else:
            print('Pass')
            return False

    # Determines with 25% probability whether to call. If calling randomly selects one of the 3 available suits.
    # Returns either the suit or False if passing
    def call_or_pass(self, must_call=False):
        rand = random.randint(1, 4)
        if rand == 1 or must_call:
            suits1 = ['S', 'C', 'H', 'D']
            suits1.remove(self.up_card[1])
            random.shuffle(suits1)
            print(suits_from_letters[suits1[0]])
            return suits1[0]
        else:
            print('Pass')
            return False

    # If the random player is told to pick it up it randomly selects one of now six cards to replace
    def pick_and_replace(self):
        self.hand += [self.up_card]
        self.hand.remove(self.hand[random.randint(0, 5)])

    # Not used yet but just returns the hand for checking purposes
    def give_hand(self):
        return self.hand


# A player that is completely controlled by user input
class RealPlayer(RandomPlayer):
    # Initially shows you your hand then will ask whether you would like the dealer (or yourself)
    # To pick up the card. If you are the dealer it will then ask which card you want to put down
    # Has some flexibility in inputs and gives examples but if there is an invalid input try again
    def pick_or_pass(self, up_card, dealer):
        print('Your hand is {}'.format(self.hand))
        if dealer == 1:
            pick_up_bool = True
            while pick_up_bool:
                choice = input('Would you like to pick up {}? (yes/no)'.format(self.up_card))
                if choice.lower() == 'y' or choice.lower() == 'yes':
                    print('Pick it up')
                    self.hand += [self.up_card]
                    replace_bool = True
                    while replace_bool:
                        replace = input('What card would you like to put down? (ex: AH = Ace of Hearts)')
                        replace = replace.upper()
                        if replace in self.hand:
                            self.hand.remove(replace)
                            print('Your hand is now {}'.format(self.hand))
                            replace_bool = False
                        else:
                            print('Invalid card choice. Try again.')
                    return True

                elif choice.lower() == 'n' or choice.lower() == 'no' or choice.lower() == 'pass':
                    print('Pass')
                    return False

                else:
                    print('Invalid input. Try again.')

        else:
            pick_up_bool = True
            while pick_up_bool:
                choice = input('Would you like player{dealer} to pick up {card}? (yes/no)'
                               ''.format(dealer=dealer, card=self.up_card))
                if choice.lower() == 'y' or choice.lower() == 'yes':
                    print('Pick it up')
                    return True
                elif choice.lower() == 'n' or choice.lower() == 'no' or choice.lower() == 'pass':
                    print('Pass')
                    return False
                else:
                    print('Invalid input. Try again.')

    # If no one says to pick it up it will ask you to call a suit or pass. If you are the dealer you must call
    def call_or_pass(self, must_call=False):
        suits1 = ['S', 'C', 'H', 'D']
        suits1.remove(self.up_card[1])
        print('Your hand is {}'.format(self.hand))
        if must_call:
            suit_bool = True
            while suit_bool:
                choice = input('What suit would you like to call? (ex: \'s\' or \'spades\')')
                choice = choice[0].upper()
                if choice in suits1:
                    print(suits_from_letters[choice])
                    return choice
                else:
                    print('Invalid suit choice. Try again.')
        else:
            suit_bool = True
            while suit_bool:
                choice = input('What suit would you like to call? (ex: \'s\' or \'spades\' or \'none\')')
                choice = choice[0].upper()
                if choice == 'N':
                    print('Pass')
                    return False
                elif choice in suits1:
                    print(suits_from_letters[choice])
                    return choice
                else:
                    print('Invalid suit choice. Try again.')

    # Displays your hand and then asks you what you would like to lead with
    def lead_trick(self):
        print('Your hand is {}'.format(self.hand))
        play_bool = True
        while play_bool:
            choice = input('What would you like to play? (ex: AH = Ace of Hearts)')
            choice = choice.upper()
            if choice in self.hand:
                self.hand.remove(choice)
                return choice
            else:
                print('Invalid card choice. Try again.')

    # Displays your hand and the cards you are eligible to play and asks you what you would like to play
    def follow_trick(self, led, trump):
        playable_cards = Euchre_game.can_play(self.hand, led, trump)
        print('Your hand: {}'.format(self.hand))
        print('Cards you can play: {}'.format(playable_cards))
        choice_bool = True
        while choice_bool:
            choice = input('Which card would you like to play? (ex: AH = Ace of Hearts)')
            choice = choice.upper()
            if choice in playable_cards:
                self.hand.remove(choice)
                return choice
            else:
                print('Invalid card choice. Try again.')

    # If someone tells you to pick up while you are dealer it will ask you to replace the card
    def pick_and_replace(self):
        self.hand += [self.up_card]
        choice_bool = True
        print('Your hand is now {}'.format(self.hand))
        while choice_bool:
            choice = input('What card would you like to put down? (ex: AH = Ace of Hearts)')
            choice = choice.upper()
            if choice in self.hand:
                self.hand.remove(choice)
                choice_bool = False
            else:
                print('Invalid card choice. Try again.')




